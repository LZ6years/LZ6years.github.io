[{"content":"\nGit 常用命令速查 1、Git 配置命令 1 2 3 4 5 6 7 8 9 10 11 12 13 git config -l # 查看当前生效的所有 Git 配置（多层级汇总） git config --system --list # 查看系统级配置（针对整台电脑） git config --global --list # 查看用户级配置（当前用户） git config --local --list # 查看当前仓库的本地配置（需在仓库目录中执行） ​ git config --global user.name \u0026#34;Your Name\u0026#34; # 设置全局用户名 git config --global user.email \u0026#34;you@example.com\u0026#34; # 设置全局邮箱 git config --global init.defaultBranch main # 设置新建仓库默认分支为 main ​ git config --global core.ignorecase false # 让 Git 区分大小写文件名 git config --global pull.rebase false # pull 默认使用 merge，可改为 true 变为 rebase git config --global merge.ff only # 禁止非快进合并 git config --global fetch.prune true # 拉取时自动清理已删除的远程分支 2、基本命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 git init # 在当前目录初始化一个新的 Git 仓库 git clone \u0026lt;url\u0026gt; # 从 url 的远程地址克隆整个仓库到本地 git clone --depth=1 \u0026lt;url\u0026gt; # 从 url 克隆最近一次提交（浅克隆），加快速度 git clone --branch \u0026lt;branch\u0026gt; \u0026lt;url\u0026gt; # 从 url 克隆指定分支 \u0026lt;branch\u0026gt; 的仓库 ​ git status # 显示工作区、暂存区状态 git diff # 比较工作区与暂存区的差异 git diff --staged # 比较暂存区与最新提交的差异 git show \u0026lt;commit\u0026gt; # 查看指定提交的详细内容 ​ git add \u0026lt;file\u0026gt; # 将指定文件加入暂存区 git add -A # 将所有修改、删除、创建文件加入暂存区 git restore --staged \u0026lt;file\u0026gt; # 从暂存区移除文件（取消暂存） git commit -m \u0026#34;提交信息\u0026#34; # 创建一个新提交 git commit --amend # 修改最近一次提交（信息或包含新改动） ​ git mv \u0026lt;old\u0026gt; \u0026lt;new\u0026gt; # 重命名文件并记录到版本历史 git rm \u0026lt;file\u0026gt; # 删除文件并记录到版本历史(工作区和暂存区同时删除) git rm --cacged \u0026lt;file\u0026gt; # 删除文件并记录到版本历史(删除暂存区文件，不删工作区) 3、分支与合并 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 git branch # 查看所有本地分支 git branch -vv # 查看分支及其上游分支与最近提交 git branch -d \u0026lt;branch\u0026gt; # 删除已经合并的分支 git branch -D \u0026lt;branch\u0026gt; # 强制删除分支 ​ git switch \u0026lt;branch\u0026gt; # 切换到已存在的分支 git switch -c \u0026lt;new-branch\u0026gt; # 创建并切换到新分支 \u0026lt;new-branch\u0026gt; git merge \u0026lt;branch\u0026gt; # 将指定分支合并到当前分支 git merge --no-ff \u0026lt;branch\u0026gt; # 禁用快进合并，保留合并提交 ​ git rebase \u0026lt;base-branch\u0026gt; # 将当前分支变基到指定分支之上 git rebase -i \u0026lt;base\u0026gt; # 交互式变基，可编辑、压缩提交 git rebase --abort # 取消正在进行的变基操作 git rebase --continue # 解决冲突后继续变基 ​ git cherry-pick \u0026lt;commit\u0026gt; # 将某次提交应用到当前分支 git revert \u0026lt;commit\u0026gt; # 生成一个新的提交来撤销指定提交 4、远程协作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 git remote -v # 查看所有已配置的远程仓库地址 git remote add origin \u0026lt;url\u0026gt; # 添加名为 origin 的远程仓库 git remote remove origin # 删除名为 origin 的远程仓库 git remote set-url origin \u0026lt;new-url\u0026gt; # 修改 origin 的远程地址 ​ git fetch # 从远程拉取最新引用和对象，不自动合并 git fetch -p # 拉取同时清理已删除的远程分支引用 git pull # 相当于 fetch + merge git pull --rebase # 拉取后用 rebase 合并，保持线性历史 ​ git push # 推送当前分支到远程 git push -u origin \u0026lt;branch\u0026gt; # 推送当前分支并设置上游 git push origin --delete \u0026lt;branch\u0026gt; # 删除远程分支 git push --tags # 推送本地所有标签到远程 5、日志与追溯 1 2 3 4 5 6 git log # 查看提交历史 git log --oneline --graph --decorate # 简洁图形化查看历史 git log -p # 查看每次提交包含的补丁 git shortlog -sn # 按作者统计提交次数 git blame \u0026lt;file\u0026gt; # 查看文件每行由谁何时修改 git reflog # 查看 HEAD 和分支引用的变动历史 6、回退与恢复 1 2 3 4 5 6 7 git reset --soft \u0026lt;commit\u0026gt; # 回退到指定提交，保留工作区和暂存区 git reset --mixed \u0026lt;commit\u0026gt; # 回退到指定提交，保留工作区，清空暂存区 git reset --hard \u0026lt;commit\u0026gt; # 回退到指定提交，丢弃暂存区和工作区改动 （默认） ​ git restore \u0026lt;file\u0026gt; # 用暂存区的内容覆盖工作区文件 git restore --source=\u0026lt;commit\u0026gt; \u0026lt;file\u0026gt; # 用指定提交的内容覆盖工作区文件 git restore --staged \u0026lt;file\u0026gt; # 从暂存区移除文件（取消暂存） 7、暂存更改（stash） 1 2 3 4 5 6 7 8 git stash push -m \u0026#34;说明\u0026#34; # 暂存当前所有更改到一个命名的 stash git stash push -u -m \u0026#34;说明\u0026#34; # 包括未跟踪文件一起暂存 git stash list # 查看 stash 列表 git stash show -p stash@{0} # 查看指定 stash 的改动详情 git stash pop # 恢复最近一个 stash 并删除它 git stash apply stash@{n} # 恢复指定 stash 但保留它 git stash drop stash@{n} # 删除指定 stash git stash clear # 删除所有 stash（危险操作） 8、标签（tag） 1 2 3 4 5 6 git tag # 查看本地所有标签 git tag v1.0.0 # 创建轻量标签 git tag -a v1.0.0 -m \u0026#34;发布说明\u0026#34; # 创建带说明的注解标签 git show v1.0.0 # 查看标签信息 git push origin v1.0.0 # 推送单个标签到远程 git push origin --tags # 推送所有标签到远程 9、常见工作流 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 git init # 初始化仓库 git add -A # 添加所有改动到暂存区 git commit -m \u0026#34;chore: initial commit\u0026#34; # 首次提交 git branch -M main # 重命名分支为 main git remote add origin \u0026lt;url\u0026gt; # 绑定远程仓库 git push -u origin main # 推送 main 分支并建立跟踪关系 ​ git switch -c feature/login # 新建功能分支并切换 git add -A # 提交前添加所有修改 git commit -m \u0026#34;feat(login): basic form\u0026#34; # 提交功能代码 git push -u origin feature/login # 推送到远程 ​ git switch feature/login # 切回功能分支 git fetch origin # 拉取远程更新 git rebase origin/main # 将分支变基到最新 main git push --force-with-lease # 强制推送（安全模式） ​ git switch main # 切回主分支 git pull # 更新主分支 git tag -a v1.2.0 -m \u0026#34;Release v1.2.0\u0026#34; # 打标签发布 git push origin v1.2.0 # 推送标签到远程 10、冲突解决 1 2 3 4 5 git add \u0026lt;冲突文件\u0026gt; # 解决冲突后标记文件为已解决 git merge --continue # 继续合并 git rebase --continue # 继续变基 git merge --abort # 放弃合并回到合并前状态 git rebase --abort # 放弃变基回到开始前状态 11、找回丢失提交 1 2 3 git reflog # 找到需要回退的提交或 HEAD@{n} git reset --hard \u0026lt;that-commit\u0026gt; # 回到该提交（危险，丢弃未提交改动） git revert \u0026lt;that-commit\u0026gt; # 创建一个新的提交反做该提交 12、搜索与清理 1 2 3 4 5 git grep \u0026#34;keyword\u0026#34; # 搜索关键字 git grep -n \u0026#34;keyword\u0026#34; -- \u0026lt;path\u0026gt; # 搜索指定路径并显示行号 ​ git clean -fd # 删除未跟踪文件和目录 git clean -fdx # 包含 .gitignore 忽略的文件（危险） git fetch 部分 1 2 3 4 5 git fetch # 从远程仓库拉取最新引用和对象，不自动合并 git fetch -p # 拉取并清理远程已删除的分支引用（prune） git fetch --all # 拉取所有远程的所有分支 git fetch origin main # 仅拉取 origin 的 main 分支 git fetch --tags # 仅获取远程的标签 git rm 部分 1 2 3 4 git rm \u0026lt;file\u0026gt; # 删除文件并记录到暂存区，提交后历史中保留删除记录 git rm --cached \u0026lt;file\u0026gt; # 仅从暂存区移除文件（工作区文件保留） git rm -r \u0026lt;folder\u0026gt; # 递归删除文件夹及其中所有文件 git rm -f \u0026lt;file\u0026gt; # 强制删除已修改或已暂存的文件 ","date":"2025-09-08T20:59:54+08:00","permalink":"https://LZ6years.github.io/p/git%E5%91%BD%E4%BB%A4/","title":"Git命令"},{"content":"前缀键 前缀键: Ctrl+s （替代默认的 Ctrl+b） 会话 Ctrl+s + C-c → 新建会话 窗口 Alt+o → 新建窗口（在当前路径） Alt+O → 将当前窗格拆分为新窗口 Alt+Q → 关闭当前窗格 Ctrl+s + C-p → 切换到上一个窗口 Ctrl+s + C-n → 切换到下一个窗口 Alt+1 … Alt+9 → 跳转到第 1–9 号窗口 Alt+! … Alt+(【Ctrl + Shift + 1 \u0026hellip; 9】 → 将当前窗格并入第 1–9 号窗口 窗格 Ctrl+s + i → 向上分屏（垂直） Ctrl+s + k → 向下分屏（垂直） Ctrl+s + j → 向左分屏（水平） Ctrl+s + l → 向右分屏（水平） Alt+f → 切换放大当前窗格 窗格切换 Ctrl+s + 1..0 → 按编号选择窗格（0 = 第 10 个） Alt+j → 切换到左边窗格 Alt+k → 切换到下方窗格 Alt+i → 切换到上方窗格 Alt+l → 切换到右边窗格 \u0026gt; → 与下方窗格交换 \u0026lt; → 与上方窗格交换 | → 与上一个窗格交换 Ctrl+n → 切换到下一个布局 窗格大小调整 Alt+N → 向左缩小 3 单位 Alt+E → 向下扩大 3 单位 Alt+U → 向上缩小 3 单位 Alt+I → 向右扩大 3 单位 窗格树视图 Ctrl+s + W → 打开树状视图 Ctrl+s + S → 将选中的窗格纵向移动 Ctrl+s + V → 将选中的窗格横向移动 复制模式（vi 模式） Alt+v → 进入复制模式 缓冲区 Ctrl+s + b → 列出缓冲区 Ctrl+s + p → 粘贴缓冲区 开关功能 Ctrl+s + C-g → 切换同步输入（红色边框 = 开启，洋红色边框 = 关闭） Ctrl+s + s → 切换状态栏显示 ","date":"2025-09-08T20:59:54+08:00","permalink":"https://LZ6years.github.io/p/tmux-%E5%91%BD%E4%BB%A4%E8%87%AA%E5%AE%9A%E4%B9%89/","title":"Tmux 命令(自定义)"},{"content":"Hugo 常用命令速查表 命令 作用 常见参数 典型用法\nhugo server 本地启动预览服务器（热更新） -D 显示草稿、-F 显示未来文章、--bind/--baseURL hugo server -D\nhugo build 生产构建，生成静态站点 --minify 压缩、--gc 清理、-d 指定输出目录 hugo --gc --minify -d public\nhugo new 新建内容/站点/主题 hugo new posts/x.md、hugo new site、hugo new theme hugo new posts/my-first-post.md\nhugo list 列出内容（草稿、未来、过期） drafts / future / expired hugo list drafts\nhugo config 查看合并后的配置 （一般无参，或结合子命令） hugo config\nhugo env 查看环境与版本信息 \u0026ndash; hugo env\nhugo version 显示 Hugo 版本 \u0026ndash; hugo version\nhugo convert 转换 Front Matter 格式 --unsafe（允许 HTML）等 hugo convert toYAML\nhugo import 从其他系统导入 jekyll（常见） hugo import jekyll old/ new/\nhugo gen 生成文档/语法高亮样式等 chromastyles、man hugo gen chromastyles --style=monokai\nhugo mod 管理模块（主题/依赖） init/get/tidy/vendor/graph hugo mod init example.com/site\nhugo deploy 部署到云端（按配置） --target、--dryRun hugo deploy --target=prod --dryRun\n","date":"2025-09-08T10:00:00+08:00","permalink":"https://LZ6years.github.io/p/hugo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8/","title":"Hugo 常用命令速查表"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://LZ6years.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://LZ6years.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]